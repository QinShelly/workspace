Option Explicit

''' ****************************************
''' ********** Declarations: **************
''' ***************************************

Dim strCommandBuffer
Dim SubscriberServer, SubscriberDB
Dim DDDServer, DDDDatabase , ApplicationDB, ApplicationDB2
Dim WshShell    
Dim fso, f

Const ForReading = 1, ForWriting = 2, ForAppending = 8

'''*************************************************
'''************* Initializations: ******************
'''*************************************************

'''Following 3 variables should be set for a subscriber server
SubscriberServer = "shagccom01"
SubscriberDB = "MSVacationData" '''This is usually the same for our application.
ApplicationDB = "MSVacationData"
ApplicationDB2 = "PersonData"

'''Following 2 variables should be configured for a different EDS server.
DDDServer = "SinData01"    
DDDDatabase = "EDS3DControl"


Set fso = CreateObject("Scripting.FileSystemObject")
Set WshShell = WScript.CreateObject("WScript.Shell")

strCommandBuffer = vbCrLf


''********************************************************
'''************** Function definitions: *****************
''********************************************************


Sub BufferCommand(strCmd)
     strCommandBuffer = strCommandBuffer & strCmd & vbCrLf
End Sub

''********************************************************

Sub FlushCommandBufferTo(strFullFilename,blnAppend)    
    
     If Len(Trim(strCommandBuffer)) = 0 Then
          Exit Sub
     End If
    
     If (fso.FileExists(strFullFilename) And blnAppend = False) Then
          fso.DeleteFile strFullFilename,true
     End If
    
     Set f = fso.OpenTextFile(strFullFilename, ForAppending, True)
     f.Write strCommandBuffer
     f.Close
     Set f = Nothing
    
     strCommandBuffer = ""
End Sub

''********************************************************

Sub ShellExecute(strCmdFile)    
     'WshShell.Run strCmdFile, 4, true
     WshShell.Run strCmdFile, 2, true    
End Sub

''********************************************************
Sub CreateGetKeyFilefor(strSecuretablename)
    
     Dim strFullFilename
     strFullFilename = "GetKey" & strSecuretablename & ".sql"
    
     If (Not fso.FileExists(strFullFilename)) Then
          ''Create file and write contents to it.
         
          Set f = fso.CreateTextFile(strFullFilename, False)
          f.WriteLine("")
              
               f.WriteLine("-- This file is generated by the system.")
               f.WriteLine("-- Dont delete it for better performance of the batch job.")
               f.WriteLine("-- It would be re-created even if you delete it.")
               f.WriteLine("")

               f.WriteLine("Declare @SecureTableName varchar(255)")
               f.WriteLine("Select @SecureTableName = '" & strSecuretablename & "'")
               f.WriteLine("")

               f.WriteLine("Use "& DDDDatabase )
               f.WriteLine("")

               f.WriteLine("SET NOCOUNT ON")
               f.WriteLine("")

               f.WriteLine("DECLARE")
               f.WriteLine("")

               f.WriteLine("     @ReturnCode integer, @SecuredTableBatchKey varchar(8000), @SQLString varchar(8000)")
               f.WriteLine("")

               f.WriteLine("RAISERROR('@Goto  Goto', 0, 1) WITH NOWAIT")
               f.WriteLine("")

               f.WriteLine("EXECUTE @ReturnCode = EDS3D_GetSecuredTableBatchKey")              
               f.WriteLine("     @EDSTableName             = @SecureTableName")
               f.WriteLine("     ,@SecuredTableBatchKey     = @SecuredTableBatchKey OUTPUT")
               f.WriteLine("")

               f.WriteLine("SELECT @SQLString = 'Set SecuredTableBatchKey=' + @SecuredTableBatchKey")
               f.WriteLine("")

               f.WriteLine("RaisError(':Goto', 0, 1) WITH NOWAIT")              
               f.WriteLine("RaisError(@SQLString, 0, 1) WITH NOWAIT")
               f.WriteLine("")                        
               f.WriteLine("")
          f.Close
          Set f = Nothing
     End If
    
End Sub

'''****************************************************************************************
Sub FlushAndExecute(strFile,blnAppend)
     call FlushCommandBufferTo(strFile,blnAppend)
     call ShellExecute(strFile)
End Sub

'''****************************************************************************************
Sub DownloadSecureTable(EDSTableName)
    
     call CreateGetKeyFilefor(EDSTableName)
     call BufferCommand("del SetBatchKey" & EDSTableName & ".cmd")
    
     call BufferCommand("osql -S " & DDDServer & " -E -b -n -o SetBatchKey" & EDSTableName & ".cmd -i GetKey" & EDSTableName & ".sql")
     call FlushAndExecute("RunEverything.cmd",false)''deletes the file if already exists

     call BufferCommand("osql -S " & SubscriberServer & " -E -b -d " & SubscriberDB & " -Q ""exec EDS3D_SyncTable @EDSTableName = '" & EDSTableName & "', @SecuredTableNextBatchKey = '%SecuredTableBatchKey%'""  > SecureTableDownload" & EDSTableName & ".log ")    
     call FlushAndExecute("SetBatchKey" & EDSTableName & ".cmd",True)
    
     '''delete the file containing secure hash key immediately as it is supposed to be SECURE
     call ShellExecute("cmd /C del SetBatchKey*.cmd")
     '''Note that we can also use this same function to supply shell commands instead of a command file    
     strCommandBuffer=""
End Sub

'''*****************************************************************************************
Sub DownloadNonSecureTable(EDSTableName)
     Call BufferCommand("osql -S " & SubscriberServer & " -E -b -d " & ApplicationDB & " -Q "" exec EDS3D_SyncTable @EDSTableName = '" & EDSTableName & "', @PermitAutomaticSnapshot = 'Y'""  >  NormalTablesDownload" & EDSTableName & ".log ")
     call FlushAndExecute("RunEverything.cmd",false)
End Sub

'''*****************************************************************************************
Sub DownloadNonSecureTable2(EDSTableName)
     Call BufferCommand("osql -S " & SubscriberServer & " -E -b -d " & ApplicationDB2 & " -Q "" exec EDS3D_SyncTable @EDSTableName = '" & EDSTableName & "', @PermitAutomaticSnapshot = 'Y'""  >  NormalTablesDownload" & EDSTableName & ".log ")
     call FlushAndExecute("RunEverything.cmd",false)
End Sub

'''****************************************************************************************
'''************ Processing Flow ************************
'''****************************************************************************************

''' brief algorithm:
'''GetKey%SecureEDSTable%.sql should be used as input for key generation.
''' If GetKey%SecureEDSTable%.sql does not exist, generate it once now and use it forever.

'''Delete SetBatchKeyVariable.cmd file if exists
''' Execute OSQL to output the key value to the above file.
''' Append The OSQL Command to be executed to fetch secure table data to the above file
'''Execute the above file


'''OUR EXECUTION STARTS FROM HERE:
''' ==================================

'''Download secure tables
CALL DownloadSecureTable("VAC01VacationS")

'''Now download non-secure tables and then synchronize the database state with the latest feedstore information.
CALL DownloadNonSecureTable("VAC01VacationStatus")
CALL DownloadNonSecureTable("VAC01VacationReason")
CALL DownloadNonSecureTable("CALNDR02FiscalYear")
CALL DownloadNonSecureTable("CALNDR02FiscalMonth")
CALL DownloadNonSecureTable("CALNDR02FiscalWeek")
CALL DownloadNonSecureTable("GL04CostCenter")
CALL DownloadNonSecureTable("GL04GLCompany")
CALL DownloadNonSecureTable2("HC01Person")
CALL DownloadNonSecureTable2("HC01PersonPosition")
CALL DownloadNonSecureTable2("HC01Building")
CALL DownloadNonSecureTable2("HC01ContingentStaff")
CALL DownloadNonSecureTable2("HC01CostCenter")
CALL DownloadNonSecureTable2("HC01PersonnelArea")
CALL DownloadNonSecureTable2("HC01PersonnelAreaSubArea")
CALL DownloadNonSecureTable2("HC01Employee")

'' Clean up
Set fso = Nothing
Set WshShell = Nothing

'''
'''EOF
'''